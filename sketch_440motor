#include <Wire.h>
#include <Adafruit_MotorShield.h>
#include <SPI.h>
#include "utility/Adafruit_PWMServoDriver.h"
#include "Adafruit_BLE_UART.h"

// Bluetooth Definitions
#define ADAFRUITBLE_REQ 10
#define ADAFRUITBLE_RDY 2  // interrupt pin
#define ADAFRUITBLE_RST 9

Adafruit_BLE_UART BTLEserial = Adafruit_BLE_UART(ADAFRUITBLE_REQ, ADAFRUITBLE_RDY, ADAFRUITBLE_RST);

// Create Motor Shield Object 
Adafruit_MotorShield AFMS = Adafruit_MotorShield();
Adafruit_StepperMotor *myMotor = AFMS.getStepper(200,1); // getStepper(steps,stepper#)
int steps = 200;
char A[8];
char c;
int i=0;
/******************Setup Loop************************/
void setup() {
  Serial.begin(9600);
  while(!Serial);
  Serial.println("Yay 440");

  // Motor and Motor Shield Declarations
  AFMS.begin(); // Put frequency as argument
  myMotor->setSpeed(100); // Default rpm
 
  
  // Bluetooth Serial Declarations
  BTLEserial.setDeviceName("HERMES"); // 7 characters max
  BTLEserial.begin();
}
/*****************************************************/

aci_evt_opcode_t laststatus = ACI_EVT_DISCONNECTED;

/*****************Main Function***********************/
void loop() {
  
   // Tell the nRF8001 to do whatever it should be working on.
  BTLEserial.pollACI();

  // Ask what is our current status
  aci_evt_opcode_t status = BTLEserial.getState();
  // If the status changed....
  if (status != laststatus) {
    // print it out!
    if (status == ACI_EVT_DEVICE_STARTED) {
        Serial.println(F("* Advertising started"));
    }
    if (status == ACI_EVT_CONNECTED) {
        Serial.println(F("* Connected!"));
    }
    if (status == ACI_EVT_DISCONNECTED) {
        Serial.println(F("* Disconnected or advertising timed out"));
    }
    // OK set the last status change to this one
    laststatus = status;
  }

  if (status == ACI_EVT_CONNECTED) {
    // Lets see if there's any data for us!
    if (BTLEserial.available()) {
      Serial.print("* "); Serial.print(BTLEserial.available()); Serial.println(F(" bytes available from BTLE"));
    }
    // OK while we still have something to read, get a character and print it out
    while (BTLEserial.available()) {
      // Obtain characters loop
      for(i=0; i<2; i++){
      A[i] = BTLEserial.read();
      Serial.print(c);
      }
      i = 0;                                                                                // Test App // Up         Down         Left         Right
      if (A[0] == '0' && A[1] == '0'){                                                        // Held  // B516       B615         B714         B813
          Serial.println("Time-Lapse Mode");                                              // Released  // B507       B606         B705         B804
          
          while(c != '!'){ // Maybe an endline character, this loop may be fucked
           c = BTLEserial.read();
           A[i] = c;
           i++;
          }
          // Decode the string
          
          
          
          myMotor->setSpeed(1); // Will probably need to be lower
          myMotor->step(steps, FORWARD, MICROSTEP);
          myMotor->step(steps, BACKWARD, MICROSTEP);  
      }
      
      else if (A[0] == '0' && A[1] == '1'){ 
          Serial.println("Stop-Motion Mode"); // 
          myMotor->setSpeed(100); // Might need to change based on calculations
          
          for(i=0; i < 200; i++){
          // Send LANC take picture
          myMotor->step(10, FORWARD, INTERLEAVE);
          }
        }  
       else if (A[0] == '1' && A[1] == '0'){
          Serial.println("Live Mode");
          
      }
  }
      

    // Next up, see if we have any data to get from the Serial console

    if (Serial.available()) {
      // Read a line from Serial
      Serial.setTimeout(100); // 100 millisecond timeout
      String s = Serial.readString();

      // We need to convert the line to bytes, no more than 20 at this time
      uint8_t sendbuffer[20];
      s.getBytes(sendbuffer, 20);
      char sendbuffersize = min(20, s.length());

      Serial.print(F("\n* Sending -> \"")); Serial.print((char *)sendbuffer); Serial.println("\"");

      // write the data
      BTLEserial.write(sendbuffer, sendbuffersize);
    }
 }
  
}

/*****************************************************/
